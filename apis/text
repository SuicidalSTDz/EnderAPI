center = function( sText, nx, ny )
	assert(type(sText)=="string","string expected, got "..type(sText))
	assert(type(nx)=="number","number expected, got "..type(nx))
	assert(type(ny)=="number","number expected, got "..type(ny))
	term.setCursorPos( ( ( nx - #sText ) / 2) - 1, ny )
	term.write( sText )
end

bracket = function( sText, nx, ny, nTextColour, nBracketColour, nBackgroundColour )
	assert(type(sText)=="string","string expected, got "..type(sText))
	assert(type(nx)=="number","number expected, got "..type(nx))
	assert(type(ny)=="number","number expected, got "..type(ny))
	assert(type(nTextColour)=="number","number expected, got "..type(nTextColour))
	assert(type(nBracketColour)=="number","number expected, got "..type(nBracketColour))
	if (type(nBackgroundColour) ~= "number" and nBackgroundColour ~= nil) then
		error("number/nil expected, got "..type(nBackgroundColour),2)
	end
	local xPos, yPos = term.getCursorPos()
	term.setBackgroundColour( nBackgroundColour or curBackgroundColour )
	term.setCursorPos( nx or xPos, ny or yPos)
	term.setTextColour( nBracketColour or colours.white )
	term.write( "[" )
	term.setTextColour( nTextColour or colours.white )
	term.write( sText )
	term.setTextColour( nBracketColour or colours.white )
	term.write( "]" )
end
