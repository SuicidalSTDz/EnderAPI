local function assert(bBool, sMessage, iLevel)
	local iLevel = iLevel or -1
	if type(sMessage) ~= "string" then
		error("String expected, got " .. type(sMessage), 2)
	elseif type(iLevel) ~= "number" then
		error("Number expected, got " .. type(iLevel), 2)
	end
	
	if not bBool then
		error( sMessage, iLevel + 1 )
	end
	return bBool
end

generate = function( nChars, nMin, nMax )
  assert( type(nChars)=="number", "Number expected, got " .. type(nChars), 2)
  assert( type(nMins)=="number", "Number expected, got " .. type(nMin), 2)
  assert( type(nMax)=="number", "Number expected, got " .. type(nMax), 2)
  assert( nMin < nMax, "minimum must be less than maximum", 2)

  local n = math.random( nMin, nMax )
  for i = 1, nChars do
    n = n .. math.random( nMin, nMax )
  end
  return n
end

isOdd = function( n )
  assert( type(n)=="number", "Number expected, got " .. type(n), 2)
  return n % 2 ~= 0
end

isEven = function( n )
  assert( type(n)=="number", "Number expected, got " .. type(n), 2)
  return n % 2 == 0
end
