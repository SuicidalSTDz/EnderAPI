local function assert(bBool, sMessage, iLevel)
	local iLevel = iLevel or -1
	if type(sMessage) ~= "string" then
		error("String expected, got " .. type(sMessage), 2)
	elseif type(iLevel) ~= "number" then
		error("Number expected, got " .. type(iLevel), 2)
	end
	
	if not bBool then
		error( sMessage, iLevel + 1 )
	end
	return bBool
end

function fs.save( sPath, sData )
  assert( type( sPath ) == "string", "string expected, got " .. type( sPath ), 2 )
  assert( type( sData ) == "string", "string expected, got " .. type( sData ), 2 )
  local f = fs.open( sPath, "w" )
  f.write( sData )
  f.close()
end

function fs.read( sPath )
  assert( type( sPath ) == "string", "string expected, got " .. type( sPath ), 2 )
  if fs.exists(sPath) then
    local handle = fs.open( sPath, "r" )
    local sData = handle.readAll()
    handle.close()
    return sData, true
  end
  return nil, false
end
